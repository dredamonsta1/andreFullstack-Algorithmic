// Node
//     - val
//     - next
//     -prev

class Node{
    constructor(val) {
        this.val = val;
        this.next = null;
        this.prev = null;
    }

    push(val) {
        let newNode = new Node(val);
        if (this.head == null) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.tail.next = newNode;
            newNode.prev = this.tail;
            this.tail = newNode;
        }
        this.length++;
        return this;

    }

    pop() {
        if (!this.head) return undefined;
        let poppedNode = this.tail;
        if (this.length === 1) {
            this.head = null;
            this.tail = null;
        } else {
            this.tail = poppedNode.prev;
            this.tail.next = null;
            poppedNode.prev = null;
        }
        this.length--;
        return poppedNode;
    }

    shift() {
        if (!this.length === 0) return undefined
        let oldHead = this.head;
        if (this.head === 1) {
            this.head = null;
            this.tail = null;
        } else {
            this.head = oldHead.next;
            this.head.prev = null;
            oldHead.next = null;
        }
        this.length--;
        return oldHead;
    }

    unshift(val) {
        let newNode = new Node(val);
        if (this.length === 0) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            this.head.prev = newNode;
            newNode.next = this.head;
            this.head = newNode;ÃŸ
        }
        length++;
        return this;
    }
    get(index) {
        if (index < 0 || index >= this.length) return null;
        if (index <= this.length / 2) {
            // incraments start of list
            let count = 0;
            let current = this.head;
            while (count != index) {
                current = current.next;
                count++;
        }
        } else {
            // decraments end of list
            let count = this.length - 1;
            let current = this.tail;
            while (count !== index) {
                current = current.prev;
                count--;
            }
        }
        return current
    }

    set(index, val) {
        let result = this.get(index);
        if (result != null) {
            result.val = val;
            return true
        }
        return false;
        
    }

    insert(index, val) {
        if(index < 0 || index > this.length) return this.length
        if (index === 0) return this.unshift(val);
        if (index.length === this.length) {
            this.push(val);
            return true;
        }
    }
}



class doublyLinkedList{
    constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
}